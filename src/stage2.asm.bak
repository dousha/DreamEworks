; stage2
; try -f elf?
[org 0xd200]

jmp entry

; GDTs are defined here

; note that we have just set a FLAT gdt
; protection is not presented yet
; needs to be fixed in further development

GDT_DESC_START:

GDT0:
dw 0 ; Limit 0~15
dw 0 ; Base 0~15
db 0 ; Base 16~23
db 0 ; Access Byte
db 0 ; Limit 16~19 + Flags
db 0 ; Base 24~31

DESCRIPTOR_CODE:
dw 0xffff ; Limit 0~15
CODE_BASE_AX dw 0 ; Base 0~15
CODE_BASE_EAHL db 0 ; Base 16~23
db 0b10011011 ; 1001 1011 - Vaild, ring 0, executable, strict, readable,
; accessed
db 0b11001111 ; 1100 1111 - paging, 32-bit
CODE_BASE_EAHH db 0 ; Base 24~31

DESCRIPTOR_DATA: 
dw 0xffff ; Limit 0~15
dw 0x0000 ; Base 0~15
db 0x00 ; Base 16~23
db 0b10010011 ; 1001 0011 - vaild, ring 0, data, forward, writable, accessed
db 0b11001111 ; 1100 1111 - 4KB, 32-bits
db 0x0 ; Base 24~31

DESCRIPTOR_STACK:
dw 0x1DB0
dw 0x8000
db 0x00
db 0b10010111
db 0b01000000
db 0x00

; Note that in further development, VRAM descriptor should be
; created dynamically
; Base = 0x000b8000
DESCRIPTOR_VIDEO:
dw 0xffff
dw 0x8000
db 0x0b
db 0b10010011
db 0b01001111
db 0x00

GDT_DESC_END:

GDTR0:
	dw GDT_DESC_END - GDT_DESC_START - 1
	dd GDT_DESC_START

SELECTOR_CODE equ DESCRIPTOR_CODE - GDT0
SELECTOR_DATA equ DESCRIPTOR_DATA - GDT0
SELECTOR_STACK equ DESCRIPTOR_STACK - GDT0
SELECTOR_VIDEO equ DESCRIPTOR_VIDEO - GDT0

; --- code ------------

[bits 16]

entry:

cli
; open a20 gate
; the dirty way
in al, 0x92
or al, 0x02
and al, ~1
out 0x92, al
; goto protected mode
; rewrite code descriptor
; load the gdt
lgdt [GDTR0]
mov eax, cr0
or eax, 1
mov cr0, eax
jmp dword SELECTOR_CODE:entry_32 ; -> protected mode!!!

[bits 32]
entry_32:
mov ax, SELECTOR_DATA
mov ds, ax
mov es, ax
mov fs, ax
mov ax, SELECTOR_STACK
mov ss, ax
xor ax, ax
mov sp, ax
mov ax, SELECTOR_VIDEO
mov gs, ax

call clrscr
mov ah, 0x07
mov si, hello_msg
mov edi, 0
call print_str

.sleep:
	hlt
	jmp .sleep

hello_msg: db "DSYS"
			db 0

; -- sub functions ----

print_str:
	mov al, [si]
	cmp al, 0
	je print_str_done
	mov [gs:edi], ax
	inc si
	add edi, 2
	jmp print_str
print_str_done:
	ret

clrscr:
	push edi
	push ax
	push ecx
	xor edi, edi
	xor ecx, ecx
	xor ax, ax
clrscr_loop:
	cmp ecx, 80 * 24  * 2
	je clrscr_done
	mov [gs:edi], ax
	inc ecx
	inc edi
	jmp clrscr_loop
clrscr_done:
	pop ecx
	pop ax
	pop edi
	ret

